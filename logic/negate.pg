##DESCRIPTION
##  Description of problem goes here
##ENDDESCRIPTION

##KEYWORDS('keyword')

## DBsubject('')
## DBchapter('')
## DBsection('')
## Date('1/1/2016')
## Author('')
## Institution('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('1.1')
## Problem1('1')


########################################################################

DOCUMENT();
loadMacros("PGstandard.pl","MathObjects.pl","PGML.pl","PGcourse.pl","parserRadioButtons.pl");
TEXT(beginproblem()); # Print problem number and point value
$showPartialCorrectAnswers = 0; # Don't show which answers are correct or incorrect (multiple choice)

Context("Numeric");

my %ans = split('', qw/a1b0c0d0e1f1g0h1i1j0k0l1m1n1o1p0q0r1s1t0u0v0w0x1y0z0/);

my @letters;
my @propletters;

sub letter {
    my $n = random(0,scalar(@letters)-1);
    my $letter = $letters[$n];
    splice(@letters,$n,1);
    return $letter;
}

sub propletter {
    my $n = random(0,scalar(@propletters)-1);
    my $letter = $propletters[$n];
    splice(@propletters,$n,1);
    return $letter;
}

my $english = 0;                # Only works with nesting <= 2

sub parens {
    my ($paren, $inside) = @_;
    return (($paren ? "(" : "") . $inside . ($paren ? ")" : ""));
}

$debug = "";

sub printstmt {
  my ($parens, $ast) = @_;
  my $head = $ast->[0];
  if($head eq 'ATOMIC') {
    my $prop = $ast->[1];
    my $args = join(',',@$ast[2..$#$ast]);
    return (($english ? "[`" : "") . $prop . parens(max($#$ast-1,0),$args) . ($english ? "`]" : ""));
  } elsif($head eq 'NOT') {
    my $p = printstmt(1, $ast->[1]);
    if ($english) {
      return ($parens ? "not $p" : "it is not the case that $p");
    } else {
      return "\neg $p";
    }
  } elsif($head eq 'IMPLIES') {
    my $p = printstmt(1, $ast->[1]);
    my $q = printstmt(1, $ast->[2]);
    if ($english) {
      return ("if $p" . ($parens ? '' : ',') . " then $q");
    } else {
      return parens($parens,"$p \rightarrow $q");
    }
  } elsif($head eq 'AND') {
    my $p = printstmt(1, $ast->[1]);
    my $q = printstmt(1, $ast->[2]);
    if ($english) {
      return (($parens ? "both " : "") . "$p". ($parens ? '' :',') . " and $q");
    } else {
      return parens($parens,"$p \land $q");
    }
  } elsif($head eq 'OR') {
    my $p = printstmt(1, $ast->[1]);
    my $q = printstmt(1, $ast->[2]);
    if ($english) {
      return (($parens ? "either " : "") . $p . ($parens ? '' : ',') . " or $q");
    } else {
      return parens($parens,"$p \lor $q");
    }
  } elsif($head eq 'FORALL') {
    my $var = $ast->[1];
    my $p = printstmt(1, $ast->[2]);
    if ($english) {
      return "for all [`$var`]" . ($parens ? " we have" : ",") . " $p";
    } else {
      return parens($parens,"\forall $var. $p");
    }
  } else {
    my $var = $ast->[1];
    my $an = $ans{$var};
    my $p = printstmt(1, $ast->[2]);
    if ($english) {
      return ("there exists " . ($an ? "an " : "a ") . "[`$var`] such that $p");
    } else {
      return parens($parens,"\exists $var. $p");
    }
  }
}

sub make_statement {
  my ($no_neg,$nesting, @vars) = @_;
  my ($p, $q);
  if ($nesting <= 0) {
    my $prop = propletter();
    return ['ATOMIC',$prop,@vars];
  } else {
    my $connective = random($no_neg,5);
    # $debug .= "DEBUG: nesting $nesting, connective $connective || \n";
    if ($connective == 0) {
      $p = make_statement(0,$nesting - 1, @vars);
      return ['NOT',$p];
    } elsif ($connective == 1) {
      my $which = random(0,1);
      $p = make_statement(0,$nesting - 1 - $which, @vars);
      $q = make_statement(0,$nesting - 2 + $which, @vars);
      return ['IMPLIES',$p,$q];
    } elsif ($connective == 2) {
      my $which = random(0,1);
      $p = make_statement(0,$nesting - 1 - $which, @vars);
      $q = make_statement(0,$nesting - 2 + $which, @vars);
      return ['AND',$p,$q];
    } elsif ($connective == 3) {
      my $which = random(0,1);
      $p = make_statement(0,$nesting - 1 - $which, @vars);
      $q = make_statement(0,$nesting - 2 + $which, @vars);
      return ['OR',$p,$q];
    } elsif ($connective == 4) {
      my $var = letter();
      $p = make_statement(0,$nesting - 1, $var, @vars);
      return ['FORALL',$var,$p];
    } else {
      my $var = letter();
      $p = make_statement(0,$nesting - 1, $var, @vars);
      return ['EXISTS',$var,$p];
    }
  }
}

sub negate_stmt {
  my ($ast) = @_;
  my $head = $ast->[0];
  if($head eq 'ATOMIC') {
    return ['NOT',$ast];
  } elsif($head eq 'NOT') {
    return simplify($ast->[1]);
  } elsif($head eq 'IMPLIES') {
    return ['AND', simplify($ast->[1]), negate_stmt($ast->[2])];
  } elsif($head eq 'AND') {
    return ['OR', negate_stmt($ast->[1]), negate_stmt($ast->[2])];
  } elsif($head eq 'OR') {
    return ['AND', negate_stmt($ast->[1]), negate_stmt($ast->[2])];
  } elsif($head eq 'FORALL') {
    return ['EXISTS',$ast->[1], negate_stmt($ast->[2])];
  } elsif($head eq 'EXISTS') {
    return ['FORALL',$ast->[1], negate_stmt($ast->[2])];
  }
  return '';
}

sub simplify {
  my ($ast) = @_;
  my $head = $ast->[0];
  if($head eq 'ATOMIC') {
    return $ast;
  } elsif($head eq 'NOT') {
    return negate_stmt($ast->[1]);
  } elsif($head eq 'IMPLIES') {
    return ['IMPLIES', simplify($ast->[1]), simplify($ast->[2])];
  } elsif($head eq 'AND') {
    return ['AND', simplify($ast->[1]), simplify($ast->[2])];
  } elsif($head eq 'OR') {
    return ['OR', simplify($ast->[1]), simplify($ast->[2])];
  } elsif($head eq 'FORALL') {
    return ['FORALL',$ast->[1], simplify($ast->[2])];
  } elsif($head eq 'EXISTS') {
    return ['EXISTS',$ast->[1], simplify($ast->[2])];
  }
  return '';
}

sub wrong_negate {
  my ($ast) = @_;
  my $head = $ast->[0];
  if($head eq 'ATOMIC') {
    return $ast;
  } elsif($head eq 'NOT') {
    return negate_stmt($ast->[1]);
  } elsif($head eq 'IMPLIES') {
    return (['IMPLIES', negate_stmt($ast->[1]), negate_stmt($ast->[2])],
            ['IMPLIES', $ast->[2], $ast->[1]],
            ['OR', negate_stmt($ast->[1]), $ast->[2]],
            (map { ['AND', $ast->[1], $_ ] } (wrong_negate($ast->[2])) ) );
  } elsif($head eq 'AND') {
    my $n1 = negate_stmt($ast->[1]);
    my $n2 = negate_stmt($ast->[2]);
    return ((map { ['OR', $_, $n2 ] } (wrong_negate($ast->[1]))),
            (map { ['OR', $n1, $_ ] } (wrong_negate($ast->[2]))),
            ['AND', $n1, $n2]);
  } elsif($head eq 'OR') {
    my $n1 = negate_stmt($ast->[1]);
    my $n2 = negate_stmt($ast->[2]);
    return ((map { ['AND', $_, $n2 ] } (wrong_negate($ast->[1]))),
            (map { ['AND', $n1, $_ ] } (wrong_negate($ast->[2]))),
            ['OR', $n1, $n2]);
  } elsif($head eq 'FORALL') {
    return ((map { ['EXISTS',$ast->[1], $_ ] } (wrong_negate($ast->[2]))),
            ['FORALL',$ast->[1], negate_stmt($ast->[2])]);
  } elsif($head eq 'EXISTS') {
    return ((map { ['FORALL',$ast->[1], $_ ] } (wrong_negate($ast->[2]))),
            ['EXISTS',$ast->[1], negate_stmt($ast->[2])]);
  }
  return '';
}

@letters = split('',"xyzabcdef");
@propletters = split('',"PQRST");

# Variables visible to PGML can't be lexically scoped
# my ($ast, $stmt, $negstmt);

$english = 0;

sub printwrapped {
  my ($ast) = @_;
  if($english) {
    return '"' . printstmt(0,$ast) . '"';
  } else {
    return '[`' . printstmt(0,$ast) . '`]';
  }
}

sub mcwrapped {
  my ($ast) = @_;
  if($english) {
    return printstmt(0,$ast);
  } else {
    return '\(' . printstmt(0,$ast) . '\)';
  }
}

if($english) {
  $ast = make_statement(1,2);
} else {
  $ast = make_statement(1,random(2,3));
}

$stmt = printwrapped($ast);
$negstmt = mcwrapped(negate_stmt($ast));
@wrong_negs = map { mcwrapped($_) } (wrong_negate($ast));

$mc = RadioButtons([[ $negstmt, @wrong_negs ]], 0);


BEGIN_PGML
Negate the statement [$stmt]** (that is, add a new [`\neg`] in front) and simplify as much as possible.

[@ $mc->buttons() @]*

END_PGML

ANS( $mc->cmp() );

ENDDOCUMENT();
