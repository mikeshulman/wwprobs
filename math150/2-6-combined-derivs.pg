##DESCRIPTION
##  Description of problem goes here
##ENDDESCRIPTION

##KEYWORDS('keyword')

## DBsubject('')
## DBchapter('')
## DBsection('')
## Date('1/1/2016')
## Author('')
## Institution('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('1.1')
## Problem1('1')

########################################################################

DOCUMENT();      
loadMacros("PGstandard.pl","MathObjects.pl","PGML.pl","PGcourse.pl","PGessaymacros.pl","contextFraction.pl");
TEXT(beginproblem()); # Print problem number and point value
$showPartialCorrectAnswers = 1; # Show which answers are correct or incorrect

Context("Fraction");            # Setting reduceConstants=>0 and not reduce()ing is another option
Context()->variables->add(y => "Real");
Context()->flags->set(limits=>[2,5]);
# Need to be smarter than this: ensure that we can check complicated
# functions nested *inside* functions like roots and logarithms that
# have restricted domain.

# This isn't the only problem either, I've seen functions like
# 7^(x^10+8^x) give the "can't generate enough valid points for
# comparison" error.  Maybe because the numbers get too big?

sub make_func {
    my ($poly_ok, $power_ok) = @_;
    my ($f, $ispoly, $ispower) = (undef, 0, 0);
    my $type = random(1 + 6 * (1 - $power_ok), 12 + (6 * $poly_ok), 1);
    if($type <= 4) {
        my $exponent = random(2,10,1);
        $f = Compute("x^$exponent");
        $ispower = 1;
    } elsif($type <= 5) {
        $f = Compute("sqrt(x)");
    } elsif($type <= 6) {
        my $exponent = Fraction(1,random(3,7,1));
        $f = Compute("x^y")->substitute(y => $exponent);
        $ispower = 1;
    } elsif($type <= 7) {
        $f = Compute("e^x");
    } elsif($type <= 8) {
        my $base = random(2,8,1);
        $f = Compute("$base^x");
    } elsif($type <= 10) {
        $f = Compute("ln(x)");
    } elsif($type <= 12) {
        my $trigf = random(1,11,1);
        if   ($trigf <= 3)  { $f = Compute("sin(x)"); }
        elsif($trigf <= 6)  { $f = Compute("cos(x)"); }
        elsif($trigf <= 8)  { $f = Compute("tan(x)"); }
        elsif($trigf <= 9)  { $f = Compute("sec(x)"); }
        elsif($trigf <= 10) { $f = Compute("csc(x)"); }
        else                { $f = Compute("cot(x)"); }
    } else {
        # Polynomial
        my $sparse = random(1,4,1);
        my $degree, $terms, @degrees, @coeffs;
        if($sparse <= 3) {
            $degree = random(1,3,1);
            $terms = $degree + 1;
            @degrees = (0..$degree);
            @coeffs = ();
            for(my $i = 0; $i <= $degree; $i++) {
                $coeffs[$i] = non_zero_random(-9,9,1);
            }
        } else {
            $terms = random(2,3,1);
            @degrees = ();
            @coeffs = ();
            for(my $i = 0; $i < $terms; $i++) {
                $coeffs[$i] = non_zero_random(-9,9,1);
                $degrees[$i] = random(9,30,1);
            }
        }
        my $poly = "";
        for(my $i = 0; $i < $terms; $i++) {
            $poly = "+ ($coeffs[$i])* x^($degrees[$i]) $poly";
        }
        $f = Compute($poly)->reduce();
        $ispoly = 1;
    }
    return ($f, $ispoly, $ispower);
}

sub make_nested {
    my ($depth, $poly_ok, $power_ok, $quot_ok) = @_;
    my ($haspoly, $ispower, $hasquot);
    if($depth <= 1) {
        ($nested, $haspoly, $ispower) = make_func($poly_ok, $power_ok);
    } else {
        my $type = random(0, 6 + (2 * $quot_ok), 1);
        my $isquot = ($type >= 7);
        $quot_ok &&= !$isquot;
        if($type <= 2) {
            my ($f, $f_haspoly, $f_ispower) = make_func(0, $power_ok);
            my ($g, $g_haspoly, $g_ispower, $g_hasquot) = make_nested($depth - 1, $poly_ok, !$f_ispower, $quot_ok);
            $nested = $f->substitute(x => $g);
            $haspoly = $g_haspoly;
            $ispower = $f_ispower;
            $hasquot = $g_hasquot;
        } else {
            my $g_simple = random(1,2,1);
            my $f_simple = $g_simple ? 1 : random(1,2,1);
            my ($f, $f_haspoly, $f_hasquot) = make_nested($depth - $f_simple, $poly_ok, $quot_ok);
            $poly_ok &&= !$f_haspoly;
            $quot_ok &&= !$f_hasquot;
            my ($g, $g_haspoly, $g_hasquot) = make_nested($depth - $g_simple, $poly_ok, $quot_ok);
            $haspoly = $f_haspoly || $g_haspoly;
            $hasquot = $f_hasquot || $g_hasquot || $isquot;
            $ispower = 0;
            if   ($type <= 3) { $nested = $f + $g }
            elsif($type <= 4) { $nested = $f - $g }
            elsif($type <= 6) { $nested = $f * $g }
            else              { $nested = $f / $g }
        }
    }
    return ($nested, $haspoly, $ispower, $hasquot);
}

my $nesting = random(2,3,1);
($f, $haspoly, $ispower, $hasquot) = make_nested($nesting,1,1,1);
$f = $f->reduce();
$df = $f->D('x')->reduce();

BEGIN_PGML
Find the derivative of the function [``f(x) = [$f]``]

[`f'(x) = `] [_______________________________________]{$df}
END_PGML

ENDDOCUMENT();        
