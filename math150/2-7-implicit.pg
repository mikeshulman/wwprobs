##DESCRIPTION
##  Description of problem goes here
##ENDDESCRIPTION

##KEYWORDS('keyword')

## DBsubject('')
## DBchapter('')
## DBsection('')
## Date('1/1/2016')
## Author('')
## Institution('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('1.1')
## Problem1('1')

########################################################################

DOCUMENT();
loadMacros("PGstandard.pl","MathObjects.pl","PGML.pl","PGcourse.pl","PGessaymacros.pl");
TEXT(beginproblem()); # Print problem number and point value
$showPartialCorrectAnswers = 1; # Show which answers are correct or incorrect

Context()->variables->add(y => "Real");

# A big problem here is getting webwork to be able to generate
# sufficient random sample points for comparison to check answers.
# Ideally I'd like to just generate functions and check whether they
# have enough sample points, repeating until we get an ok one, but I
# haven't been able to figure out a good way to check whether a
# function has enough sample points in advance.

# Current "solution" is to set these limits relatively carefully:
Context()->flags->set(limits=>[0.01, 1.5]);
# and then do a little tracking of positive/negative values.
# Specifically, each make_func can be told whether it's "okay to be
# negative", which it then more or less obeys, and can also return
# whether its input is allowed to be negative which is passed on to
# inner functions of compositions.  This would work great except for
# trig functions, but I'm hoping that issues won't be prevalent.

sub make_term {
  my $type = random(1,5,1);
  my $coeff = non_zero_random(-4,4,1);
  if($type <= 2) {
    my $a = random(1,4,1);
    my $b = random(1,4,1);
    return Formula("$coeff x^($a) y^($b)");
  } elsif($type == 2) {
    my $a = random(1,4,1);
    my $str = "x^($a)";
    my $func = random(1,3,1);
    if($func <= 2) {
      return Formula("$coeff $str e^y");
    } elsif($func <= 3) {
      return Formula("$coeff $str sin(y)");
    } else {
      return Formula("$coeff $str cos(y)");
    }
  } elsif($type == 3) {
    my $a = random(1,4,1);
    my $str = "y^($a)";
    my $func = random(1,3,1);
    if($func <= 2) {
      return Formula("$coeff e^x $str ");
    } elsif($func <= 3) {
      return Formula("$coeff sin(x) $str");
    } else {
      return Formula("$coeff cos(x) $str");
    }
  } else {
    my $a = random(1,2,1);
    my $b = random(1,2,1);
    my $str = "x^($a) y^($b)";
    my $func = random(1,3,1);
    if($func <= 2) {
      return Formula("$coeff e^($str)");
    } elsif($func <= 3) {
      return Formula("$coeff sin($str)");
    } else {
      return Formula("$coeff cos($str)");
    }
  }
}

Context()->noreduce("(-x)-y");

$lct = random(1,2,1);
$left = Formula(0);
for($i = 0; $i < $lct; $i++) {
  $left = $left + make_term();
}
$rct = random(1,2,1);
$right = Formula(0);
for($i = 0; $i < $rct; $i++) {
  $right = $right + make_term();
}
$left = $left->reduce();
$right = $right->reduce();
$f = $left - $right;

$dfx = $f->D('x')->reduce();
$dfy = $f->D('y')->reduce();

if($dfy == 0) {
  $dydx = Formula("INF");
} else {
  $dydx = - $dfx / $dfy;
}

Context()->texStrings;
BEGIN_TEXT
Given the equation \( $left = $right \) which expresses \(y\) as an implicit function of \(x\), find the derivative \(\frac{dy}{dx}\) in terms of \(x\) and \(y\).  If finding this derivative would involve dividing by zero, enter \(\infty\) or INF.

$PAR

\(\frac{dy}{dx} = \) \{ans_rule(40)\}
END_TEXT

ANS($dydx->cmp());

ENDDOCUMENT();
